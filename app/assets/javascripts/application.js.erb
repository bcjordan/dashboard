// This is a manifest file that'll be compiled into application.js, which will include all the files
// listed below.
//
// Any JavaScript/Coffee file within this directory, lib/assets/javascripts, vendor/assets/javascripts,
// or vendor/assets/javascripts of plugins, if any, can be referenced here using a relative path.
//
// It's not advisable to add code directly here, but if you do, it'll appear at the bottom of the
// compiled file.
//
// Read Sprockets README (https://github.com/sstephenson/sprockets#sprockets-directives) for details
// about supported directives.
//
//= require jquery
//= require jquery_ujs
//= require jquery.ui.all
//= require video
//= require_tree .
// Loads all Bootstrap javascripts
//= require bootstrap

<% environment.context_class.instance_eval { include ApplicationHelper } %>

// Prevent callstack exceptions when opening multiple dialogs
// http://stackoverflow.com/a/15856139/2506748
$.fn.modal.Constructor.prototype.enforceFocus = function () {};

// In IE console is only defined when developer tools is open. Define it as a
// noop when undefined (otherwise exceptions get thrown)
if (!window.console) {
  window.console = {};
}
if (!window.console.log) {
  window.console.log = function () { };
}

var KEY_ESCAPE = 27;

// Wrap existing window onerror caller with a script error check.  If we have a
// script error and a url, throw that so that we have the info in new relic.
var windowOnError = window.onError;
window.onerror = function (msg, url, ln) {
  if (/^Script Error/.test(msg) && url) {
    throw "Script Error: " + url;
  }
  if (windowOnError) {
    windowOnError.apply(this, arguments);
  }
};

// Prevent escape from canceling page loads.
$(document).keydown(function(e) {
  if (e.keyCode === KEY_ESCAPE) {
    e.stopPropagation();
    e.preventDefault();
  }
});

setTimeout(function() {
  $('#blocklyApp .slow_load').show();
}, 10000);

function getShowNotes(key, container) {
  var callback = function(data) {
    container.html(data);
  };

  $.ajax({
    url: '/notes/' + key,
    success: callback
  });
}

function createVideo(options) {
  return $('<iframe id="video"/>').addClass('video-player').attr({
    src: options.src,
    scrolling: 'no'
  });
}

// Options include:
//   src - the url to the video
//   key - an uid.
//   name - a string.
//   redirect - the redirect page after the video is dismissed.
function showVideo(options) {
  var widthRatio = .8;
  var heightRatio = .8;
  var aspectRatio = 16 / 9;

  var body = $('<div/>');
  var content = $('#notes-content').contents().clone();
  content.find('.video-name').text(options.name);
  body.append(content);

  var video = createVideo(options);
  body.append(video);

  var notesDiv = $('<div id="notes-outer"><div id="notes"/></div>');
  body.append(notesDiv);
  getShowNotes(options.key, notesDiv.children('#notes'));

  var dialog = new Dialog({ body: body, redirect : options.redirect });
  $div = $(dialog.div);
  $div.addClass('video-modal');

  var tabHandler = function(event, ui) {
    var tab = ui.tab || ui.newTab;  // Depends on event.
    var videoElement = $('#video');
    if (tab.find('a').attr('href') === "#video") {
      // If it is the video page, restor the src
      videoElement.attr('src', options.src);
    } else {
      videoElement.attr('src', '');
    }
    // Remember which tab is selected.
    var selected = tab.parents('.ui-tabs').tabs('option', 'active');
    try {
      window.sessionStorage.setItem('lastTab', selected);
    } catch (exc) {
      console.log('Caught exception in sessionStorage.setItem: ', exc);
    }
  };

  var lastTab = window.sessionStorage.getItem('lastTab');
  body.tabs({
    event : 'click touchend',
    activate: tabHandler,
    create: tabHandler,
    active: (lastTab !== null) ? lastTab : 0  // Set starting tab.
  });

  var download = $('<a/>').append($('<img src="<%= asset_path 'download_button.png' %>"/>'))
                          .addClass('download-video')
                          .attr('href', options.download);
  var nav = $('.ui-tabs-nav');
  nav.append(download);

  // Resize modal to fit constraining dimension.
  var height = $(window).height() * widthRatio,
      width = $(window).width() * heightRatio;

  if (height * aspectRatio < width) {
    $div.height(height);
    $div.width(height * aspectRatio);
  } else {
    $div.height(width / aspectRatio);
    $div.width(width);
  }

  // Standard css hack to center a div within the viewport.
  $div.css({
    top: '50%',
    left: '50%',
    marginTop: ($div.height() / -2) + 'px',
    marginLeft: ($div.width() / -2) + 'px'
  });

  var divHeight = $div.innerHeight() - nav.outerHeight();
  $(video).height(divHeight);

  notesDiv.height(divHeight);

  dialog.show();

  setupVideoFallback(options, divHeight, $div.width());
}

function setupVideoFallback(videoInfo, playerHeight, playerWidth) {
  if (!videoInfo['enable_fallback']) {
    return;
  }

  onYouTubeBlocked(function() {
    addFallbackVideoPlayer(videoInfo, playerHeight, playerWidth);
  });
}

function onYouTubeBlocked(callback) {
  onURLBlocked(youTubeAvailabilityEndpointURL(), callback);
}

function youTubeAvailabilityEndpointURL() {
  if (window.document.URL.toString().indexOf('force_youtube_fallback') >= 0) {
    return 'http://unreachable-test-subdomain.example.com/favicon.ico'
  }
  return "https://www.youtube.com/favicon.ico";
}

function onURLBlocked(base_url, callback) {
  $("<img width=0 height=0>")
      .on("error", callback)
      .attr("src", base_url + "?" + Math.random())
      .css("position", "absolute")
      .appendTo("body");
}

function addFallbackVideoPlayer(videoInfo, playerHeight, playerWidth) {
  var fallbackPlayerID = 'fallbackPlayer' + Date.now();
  var playerCode =
    '<div><video id="'+ fallbackPlayerID +'" ' +
      'width="' + playerWidth + '" height="' + playerHeight + '" ' +
      'data-setup=\'{ "autoplay": true }\' ' +
      'class="video-js vjs-default-skin vjs-big-play-centered" ' +
      'controls preload="auto" ' +
      'poster="' + videoInfo.thumbnail + '">' +
      '<source src="' + videoInfo.download + '" type="video/mp4"/>' +
    '</video></div>';

  // Swap current #video with new code
  replaceWithElement('video', playerCode);

  videojs.options.flash.swf = "<%= asset_path("video-js.swf") %>";
  videojs.options.techOrder = ["flash", "html5"];

  var videoPlayer = videojs(fallbackPlayerID, {}, function() {
    var $fallbackPlayer = $('#' + fallbackPlayerID);
    var showingErrorMessage = $fallbackPlayer.find('p').length > 0;
    if (showingErrorMessage) {
      $fallbackPlayer.addClass('fallback-video-player-failed');
      if (hasNotesTab()) {
        openNotesTab();
      }
    }
    // Properly dispose of video.js player instance when hidden
    $fallbackPlayer.parents('.modal').one('hidden.bs.modal', function(){
      videoPlayer.dispose();
    })
  });
}

function hasNotesTab() {
  return $('.dash_modal_body a[href="#notes-outer"]').length > 0;
}

function openNotesTab() {
  var notesTabIndex = $('.dash_modal_body a[href="#notes-outer"]').parent().index();
  $('.ui-tabs').tabs('option', 'active', notesTabIndex);
}

/**
 * Replaces element with ID oldID with the HTML at newHTML
 * Copies over attributes of old element into new one
 * @param oldID
 * @param newHTML
 */
function replaceWithElement(oldID, newHTML) {
  var $oldElement = $('#' + oldID);
  var oldAttributes = $oldElement.prop("attributes");

  var $newElement = $(newHTML);
  $oldElement.before($newElement);
  $oldElement.remove();
  $newElement.attr('id', oldID);

  $.each(oldAttributes, function() {
    $newElement.attr(this.name, this.value);
  });
}

function embed_thumbnail_image(data) {
  var thumbnails = data.entry.media$group.media$thumbnail;
  var video_code = data.entry.media$group.yt$videoid.$t;
  if (thumbnails && thumbnails.length > 0) {
      $("#thumbnail_" + video_code).attr('src', thumbnails[0].url);
  }
}

var addClickTouchEvent = function(element, handler) {
  var wrapper = function(e) {
    handler(e);
    e.preventDefault();
  };
  element.on({
    'touchstart': wrapper,
    'click': wrapper
  });
};

/**
 * Create a custom modal dialog box which takes a configurable options object.
 * Currently supported options include 'header' and 'body', which are DOM
 * elements; 'redirect', which specifies the redirect page after the video is
 * dismissed if provided; 'id', which specifies the id of the dialog.
 */
function Dialog(options) {
  var body = options.body;
  var header = options.header;
  var close = $('<div id="x-close"/>').append($('<img src="<%= asset_path 'x_button.png' %>"/>'))
                         .addClass('x-close')
                         .attr('data-dismiss', 'modal');
  this.div = $('<div tabindex="-1"/>').addClass('modal');
  this.div.addClass('dash_modal');
  if (options.id) {
    this.div.attr('id', options.id);
  }
  var modalBody = $('<div/>').addClass('modal-body');
  modalBody.addClass('dash_modal_body');
  if (header) {
    var modalHeader = $('<div/>').addClass('modal-header')
                                 .append(close)
                                 .append(header);
    this.div.append(modalHeader);
  } else {
    modalBody.append(close);
  }
  modalBody.append(body);
  this.div.append(modalBody).appendTo($(document.body));

  // When the dialog is hidden, unhook the keydown event handler.
  // If onHidden option is passed in, call that as well.
  // If redirect option is passed in, redirect the page.
  // After that, close the dialog.
  $(this.div).on(
      'hidden.bs.modal',
      function() {
        if (options.onKeydown) {
          $(this.div).off('keydown', options.onKeydown);
        }
        if (options.onHidden) {
          options.onHidden();
        }
        if (options.redirect) {
          window.location.href = options.redirect;
        }
        $(this).remove();
  });

  if (options.onKeydown) {
    $(this.div).on('keydown', options.onKeydown);
  }

  addClickTouchEvent(close, $.proxy(function(e) {
    this.hide();
  }, this));
}

/**
 * Options is configurable with a top and left properties, both are integers.
 * Also includes staticBackdrop.  When true, modal dialog's backdrop will not
 * close the dialog when clicked.
 */
Dialog.prototype.show = function(options) {
  options = options || {};

  $(this.div).modal({
    show: true,
    // The default value for backdrop is true, meaning clicking the backdrop
    // will close the modal. A value of 'static' will not close the modal.
    backdrop: options.backdrop || true
  });

  if (options.backdrop !== 'static') {
    addClickTouchEvent($(this.div).next(), $.proxy(function() {
      this.hide();
    }, this));
  }

  this.div.offset(options);
}

Dialog.prototype.hide = function() {
  // Hide let's bootstrap cleanup first, then we remove.
  $(this.div).modal('hide');
}

function cache_bust_only() {
    return 'bust cache';
}
