.unplugged.match

  - data = @level.properties

  %h2!= match_t(data['title'])
  %p!= match_t(data['description']) if data['description']
  %p!= match_t(data['banner']) if data['banner']

  - data['answers'].each_with_index do |answer, i|
    - answer['index'] = i
  - begin newanswers = data['answers'].shuffle end while newanswers == data['answers']
  - data['answers'] = newanswers

  - height = data['height'] || '20'
  - height += 'px'

  .mainblock
    .column
      %ul#questions
        - data['questions'].each do |question|
          %li{style: "height: #{height}"}!= match_t(question['text'])
    .column
      %ul#slots.draggablecolumn
        - data['answers'].each do |answer|
          %li.emptyslot{style: "height: #{height}"}
    .column
      %ul#answers.draggablecolumn
        - data['answers'].each do |answer|
          %li.answer.answerlist{style: "height: #{height}", originalIndex: answer['index']}!= match_t(answer['text'])
    .clear
    %br/
    %div
      .buttons
        %a.btn.btn-primary.next-stage.submitButton
          Submit

  .clear

  %div{:style=>'display:none'}
    #dialogcontent.modal-content
      %p.dialog-title
        =t("match.wrong_title")
      %p
        =t("match.wrong_body")
      .farSide
        %button#ok-button.secondary
          =t("dialog.ok")

:javascript

  jQuery.fn.swap = function(b){ 
    // method from: http://blog.pengoworks.com/index.cfm/2008/9/24/A-quick-and-dirty-swap-method-for-jQuery
    b = jQuery(b)[0]; 
    var a = this[0]; 
    var t = a.parentNode.insertBefore(document.createTextNode(''), a); 
    b.parentNode.insertBefore(a, b); 
    t.parentNode.insertBefore(b, t); 
    t.parentNode.removeChild(t); 
    return this; 
  };

  function showDialog()
  {
    var dialog = new Dialog({ body: "" });

    // use our prefabricated dialog content
    $(".modal-body").append($("#dialogcontent").clone(true));

    // Standard css hack to center a div within the viewport
    var full_dialog = $(".dash_modal");
    full_dialog.css({
      top: '50%',
      left: '50%',
      marginTop: (full_dialog.height() / -2) + 'px',
      marginLeft: (full_dialog.width() / -2) + 'px'
    });

    // clicking the okay button in the dialog box dismisses it
    $(".modal-body #ok-button").click(function() {
      dialog.hide();
    });

    dialog.show();
  }

  var solution = "none";    // "none", "wrong", "right"
  var buttonEnabled = true;  // avoid multiple simultaneous submissions

  function enableButton(enable)
  {
    buttonEnabled = enable;
    $('.submitButton').css({ opacity: enable ? 1.0 : 0.5 });
  }

  $(function() 
  {
    $("#answers li").draggable({ revert: "invalid", stack: ".answer" });  

    // set up the central list of empty slots.
    $("#slots li").droppable({
      activeClass: "active",
      hoverClass: "hover",
      accept: ".answerlist,.answerslot",
      drop: function(event, ui) 
      {
        // once an answer is in the central list of slots, it will just swap with whatever it's dragged onto
        if (ui.draggable.hasClass("answerslot"))
        {
          // swap this empty slot and the answer dragged onto it
          ui.draggable.swap(event.target);

          // remove offset coordinates from this item
          ui.draggable.css({'top': 'auto','left': 'auto'});
        }
        // when an answer is in the rightmost list of answers, it can be dragged in to replace an empty slot
        // in the central list of slots.
        else
        {
          var movingItem = ui.draggable.detach();

          // replace target with this new item
          $(event.target).replaceWith(movingItem);

          // the new item is now droppable
          movingItem.droppable();

          // remove offset coordinates from the dragged item
          movingItem.css({'top': 'auto','left': 'auto'});

          // this class is no longer in the answer list
          movingItem.removeClass("answerlist");

          // this class can now be both dragged and a drop target for fellow answers in slots
          movingItem.addClass("answerslot");

          // this new item can now be dropped onto by other answers in the central list
          movingItem.droppable({
            accept: ".answerslot",
            activeClass: "active",
            drop: function(event, ui)
            {
              // remove offset coordinates from the dragged item
              ui.draggable.css({'top': '0px','left': '0px'});

              // determine y difference between old location and new location of item that will be swapped out
              var origY = $(event.target).offset().top;
              var destY = $(ui.draggable).offset().top;
              var diffY = destY - origY;

              // swap this answer with the answer dropped onto it
              ui.draggable.swap(event.target);

              // move the target object back to its old location for a moment
              $(event.target).css({'top': -diffY + 'px'})

              // and animate back to its new location
              $(event.target).animate({'top': '0px'});
            }
          });
        }
      }
    });
  });

  $('.submitButton').click(function() 
  {
    if (buttonEnabled) 
    {
      enableButton(false)

      var wrongAnswer = false;

      var elements = $("#slots li")
      
      for (index = 0; index < elements.length; elements++)
      {
        value = elements[index];

        console.log(value.getAttribute("originalIndex"));

        if (value.getAttribute("originalIndex") != index)
        {
          wrongAnswer = true;
        }
      }

      solution = wrongAnswer ? "wrong" : "right";

      if (solution == "wrong") 
      {
        showDialog();
      }
      
      if (solution != "none")
      {
        sendReport({
          fallbackResponse: '#{@fallback_response.to_json}',
          callback: '#{@callback}',
          app: 'multi',
          level: '#{@level.level_num}',
          result: solution == "right",
          testResult: solution == "right" ? 100 : 0,
          onComplete: function() 
          {
            if (! nextRedirect)
            {
              enableButton(true);
            }

            if (videoInfo) 
            {
              showVideo(videoInfo);
            } 
            else if (nextRedirect) 
            {
              window.location.href = nextRedirect;
            }
          }
       });
      }
    }
  });
