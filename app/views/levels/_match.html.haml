.unplugged.match

  -data = @level.properties

  %h2= match_t(data['title'])
  %p= match_t(data['description'])

  -data['answers'].each_with_index do |answer, i|
    -answer['index'] = i
  -data['answers'].shuffle!

  %div{:style=>'margin-left:20px'}
    %div{:style=>'height:40px'}
      %b Match the questions with the answers
    %div{:style=>'width: 220px; float:left'}
      %ul#questions
        -data['questions'].each do |question|
          %li= match_t(question['text'])
    %div{:style=>'width: 220px; float:left'}
      %ul#slots{:style=>'cursor:default'}
        -data['answers'].each do |answer|
          %li.emptyslot
    %div{:style=>'width: 220px; float:left'}
      %ul#answers{:style=>'cursor:default'}
        -data['answers'].each do |answer|
          %li.answer.answerlist{originalIndex: answer['index']}= match_t(answer['text'])
    %div{:style=>'clear:both'}
    %br/
    %div
      .buttons
        %a.btn.btn-primary.next-stage.submitButton
          Submit

  %div{:style=>'clear:both'}

:javascript

  jQuery.fn.swap = function(b){ 
    // method from: http://blog.pengoworks.com/index.cfm/2008/9/24/A-quick-and-dirty-swap-method-for-jQuery
    b = jQuery(b)[0]; 
    var a = this[0]; 
    var t = a.parentNode.insertBefore(document.createTextNode(''), a); 
    b.parentNode.insertBefore(a, b); 
    t.parentNode.insertBefore(b, t); 
    t.parentNode.removeChild(t); 
    return this; 
  };

  var solution = "none";    // "none", "wrong", "right"
  var clickedNext = false;  // avoid multiple simultaneous submissions

  $(function() 
  {
    $("#answers li").draggable({ revert: "invalid", stack: ".answer" });  

    // set up the central list of empty slots.
    $("#slots li").droppable({
      activeClass: "active",
      hoverClass: "hover",
      accept: ".answerlist,.answerslot",
      drop: function(event, ui) 
      {
        // once an answer is in the central list of slots, it will just swap with whatever it's dragged onto
        if (ui.draggable.hasClass("answerslot"))
        {
          // swap this empty slot and the answer dragged onto it
          ui.draggable.swap(event.target);

          // remove offset coordinates from this item
          ui.draggable.css({'top': 'auto','left': 'auto'});
        }
        // when an answer is in the rightmost list of answers, it can be dragged in to replace an empty slot
        // in the central list of slots.
        else
        {
          var movingItem = ui.draggable.detach();

          // replace target with this new item
          $(event.target).replaceWith(movingItem);

          // the new item is now droppable
          movingItem.droppable();

          // remove offset coordinates from the dragged item
          movingItem.css({'top': 'auto','left': 'auto'});

          // this class is no longer in the answer list
          movingItem.removeClass("answerlist");

          // this class can now be both dragged and a drop target for fellow answers in slots
          movingItem.addClass("answerslot");

          // this new item can now be dropped onto by other answers in the central list
          movingItem.droppable({
            accept: ".answerslot",
            activeClass: "active",
            drop: function(event, ui)
            {
              // remove offset coordinates from the dragged item
              ui.draggable.css({'top': 'auto','left': 'auto'});

              // swap this answer with the answer dropped onto it
              ui.draggable.swap(event.target);
            }
          });
        }
      }
    });
  });

  $('.submitButton').click(function() 
  {
    if (!clickedNext) 
    {
      clickedNext = true;

      var wrongAnswer = false;

      var elements = $("#slots li")
      
      for (index = 0; index < elements.length; elements++)
      {
        value = elements[index];

        console.log(value.getAttribute("originalIndex"));

        if (value.getAttribute("originalIndex") != index)
        {
          wrongAnswer = true;
        }
      }

      solution = wrongAnswer ? "wrong" : "right";

      if (solution == "none") 
      {
        clickedNext = false;    
      }
      else if (solution == "wrong") 
      {
        alert("incorrect");
        clickedNext = false;
      }
      
      if (solution != "none")
      {
        sendReport({
          fallbackResponse: '#{@fallback_response.to_json}',
          callback: '#{@callback}',
          app: 'multi',
          level: '#{@level.level_num}',
          result: solution == "right",
          testResult: solution == "right" ? 100 : 0,
          onComplete: function() 
          {
            if (videoInfo) 
            {
              showVideo(videoInfo);
            } 
            else if (nextRedirect) 
            {
              window.location.href = nextRedirect;
            }
          }
       });
      }
    }
  });
